name: Go

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:

    - name: Set up Go 1.x
      uses: actions/setup-go@v2
      with:
        go-version: ^1.13
      id: go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2

    - name: Get dependencies
      run: |
        go get -v -t -d ./...
        if [ -f Gopkg.toml ]; then
            curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
            dep ensure
        fi

    - name: Install kubebuilder
      run: |
        os=$(go env GOOS)
        arch=$(go env GOARCH)

        # download kubebuilder and extract it to tmp
        curl -L https://go.kubebuilder.io/dl/2.3.1/${os}/${arch} | tar -xz -C /tmp/

        # move to a long-term location and put it on your path
        # (you'll need to set the KUBEBUILDER_ASSETS env var if you put it somewhere else)
        sudo mv /tmp/kubebuilder_2.3.1_${os}_${arch} /usr/local/kubebuilder
        export PATH=$PATH:/usr/local/kubebuilder/bin

    - name: Build
      run: go build -v .

    - name: Test
      run: go test -v ./...

  buildx:
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Set up Docker Buildx
        uses: crazy-max/ghaction-docker-buildx@v3
      -
        name: Docker Buildx (build)
        run: |
          docker buildx build \
            --platform linux/amd64,linux/arm64,linux/arm/v7 \
            --output "type=image,push=false" \
            --tag dukeman/wioop:latest \
            --file ./Dockerfile ./
      -
        name: Docker Login
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          echo "${DOCKER_PASSWORD}" | docker login --username "${DOCKER_USERNAME}" --password-stdin
      -
        name: Docker Buildx (push)
        run: |
          docker buildx build \
            --platform linux/amd64,linux/arm64,linux/arm/v7 \
            --output "type=image,push=true" \
            --tag dukeman/wioop:latest \
            --file ./Dockerfile ./
      -
        name: Docker Check Manifest
        run: |
          docker run --rm mplatform/mquery dukeman/wioop:latest
      -
        name: Clear
        if: always()
        run: |
          rm -f ${HOME}/.docker/config.json
